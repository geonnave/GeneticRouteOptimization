require "./util.rb"
require "./graph.rb"

class GeneticAlgorithm
	include Util
	attr_reader :population
	
	def initialize graph, number_of_generations = 20,pop_length=400, cross_rate=10,mutation_rate=10, gen_range=80
		@number_of_generations = number_of_generations
		@graph = graph
		@population = []
		@pop_length = pop_length
		@cross_rate = cross_rate
		@gen_range = gen_range
		@mutation_rate = mutation_rate
	end

	def run
		gen_population
		@number_of_generations.times{
			mutate
			cross
			select_next_generation
			gen_population
	}
		@population.first #best element
	end

	def gen_population
		genetic_codes = []
		(@pop_length-population.size).times do 
			genetic_codes << random_genetic_code(@graph.size)
		end
		genetic_codes.uniq!
		genetic_codes.each { |genetic_code| @population << Element.new(genetic_code,@graph) }

		sort_population
	end

	def select_next_generation
		count = calculate @gen_range
		count.times {@population.pop}
	end

	def cross
		(calculate @cross_rate).times{|i| @population.concat(@population[i].crossing(@population[i+1]))}
		sort_population
	end

	def mutate
	end

	def sort_population
		@population.sort!
	end

	def calculate rate
		tmp = (@population.size/rate)
		count = 0
		if tmp.is_a? Float
			count = tmp.ceil
		else
			count = tmp
		end
		count
	end

end

